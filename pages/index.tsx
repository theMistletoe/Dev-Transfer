import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import getWeb3 from "../libs/getWeb3";
import {addresses, contractFactory} from "@devprotocol/dev-kit"
import Web3 from "web3";
import { BigNumber } from 'ethers';

const Home = () => {

  const [targetAddress, setTargetAddress] = useState<string>('');
  const [transferAmount, settransferAmount] = useState<number>(0);

  const handleChangeTargetAddress = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTargetAddress(e.target.value);
    console.log(targetAddress);
  }

  const handleChangeTransferAmount = (e: React.ChangeEvent<HTMLInputElement>) => {
    settransferAmount(Number(e.target.value));
    console.log(transferAmount);
  }

  const handleTransferButton = async (_: React.MouseEvent<HTMLButtonElement>) => {
    const provider  = new Web3(window.ethereum)
    const clientDev = contractFactory(provider.currentProvider)
    const registryContract = clientDev.registry(addresses.eth.ropsten.registry)
    const addressDEV = await registryContract.token()

    const decimalNumber = Math.pow(10, 18).toString()
    const transferDev   = BigNumber.from(transferAmount).mul(decimalNumber).toString()
    const transfer      = await clientDev.dev(addressDEV).transfer(targetAddress, transferDev)
    console.log(transfer);
    
  }

  const xxx = async () => {
    // // Get network provider and web3 instance.
    // const web3 = await getWeb3();

    // // Use web3 to get the user's accounts.
    // const accounts = await web3.eth.getAccounts();

    // // const provider = new Web3.providers.HttpProvider('http://localhost:8545');
    // // const provider = new Web3.providers.HttpProvider(
    // //   "http://127.0.0.1:8545"
    // // );
    // const provider  = new Web3(window.ethereum)
    // const factory = contractFactory(provider.currentProvider);
    // const balance = await factory.dev().balanceOf('0xB204f0Bb68De735b98abBA5ccAE7459837c2f084')
    // // const balance ＝ await factory.dev().balanceOf('0xB204f0Bb68De735b98abBA5ccAE7459837c2f084')
    // console.log(accounts);
    // console.log(balance);
    const provider  = new Web3(window.ethereum)
    const accounts = await provider.eth.getAccounts();
    const clientDev = contractFactory(provider.currentProvider)
    const registryContract = clientDev.registry(addresses.eth.ropsten.registry)
    const addressDEV       = await registryContract.token()
    console.log(addressDEV);
    const name = await clientDev.dev(addressDEV).name() // Dev
    console.log(name);
    const symbol = await clientDev.dev(addressDEV).symbol() // DEV
    console.log(symbol);
    const totalSupply = await clientDev.dev(addressDEV).totalSupply()
    console.log(totalSupply);
    const balanceOfDEV = await clientDev.dev(addressDEV).balanceOf(accounts[0])
    console.log(balanceOfDEV);
    // const balanceOfDEV = await clientDev.dev(addressDEV).balanceOf(addressWallet)
    // console.log(balanceOfDEV);
  }

  useEffect(() => {
    xxx();
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <input type="text" onChange={handleChangeTargetAddress} placeholder='targetAddress'/>
        <input type="number" onChange={handleChangeTransferAmount} placeholder='amount'/>
        <button onClick={handleTransferButton}>transfer</button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home;